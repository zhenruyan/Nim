SQLite	db_sqlite.html#sqlite_1	Module db_sqlite	
Parameter substitution	db_sqlite.html#parameter-substitution	 Parameter substitution	
Examples	db_sqlite.html#examples	 Examples	
Opening a connection to a database	db_sqlite.html#examples-opening-a-connection-to-a-database	  Opening a connection to a database	
Creating a table	db_sqlite.html#examples-creating-a-table	  Creating a table	
Inserting data	db_sqlite.html#examples-inserting-data	  Inserting data	
Larger example	db_sqlite.html#examples-larger-example	  Larger example	
DbConn	db_sqlite.html#DbConn	db_sqlite: DbConn	
Row	db_sqlite.html#Row	db_sqlite: Row	
InstantRow	db_sqlite.html#InstantRow	db_sqlite: InstantRow	
dbError	db_sqlite.html#dbError,DbConn	db_sqlite: dbError(db: DbConn)	
dbQuote	db_sqlite.html#dbQuote,string	db_sqlite: dbQuote(s: string): string	
tryExec	db_sqlite.html#tryExec,DbConn,SqlQuery,varargs[string,]	db_sqlite: tryExec(db: DbConn; query: SqlQuery; args: varargs[string, `$`]): bool	
exec	db_sqlite.html#exec,DbConn,SqlQuery,varargs[string,]	db_sqlite: exec(db: DbConn; query: SqlQuery; args: varargs[string, `$`])	
fastRows	db_sqlite.html#fastRows.i,DbConn,SqlQuery,varargs[string,]	db_sqlite: fastRows(db: DbConn; query: SqlQuery; args: varargs[string, `$`]): Row	
instantRows	db_sqlite.html#instantRows.i,DbConn,SqlQuery,varargs[string,]	db_sqlite: instantRows(db: DbConn; query: SqlQuery; args: varargs[string, `$`]): InstantRow	
instantRows	db_sqlite.html#instantRows.i,DbConn,DbColumns,SqlQuery,varargs[string,]	db_sqlite: instantRows(db: DbConn; columns: var DbColumns; query: SqlQuery;\n            args: varargs[string, `$`]): InstantRow	
`[]`	db_sqlite.html#[],InstantRow,int32	db_sqlite: `[]`(row: InstantRow; col: int32): string	
len	db_sqlite.html#len,InstantRow	db_sqlite: len(row: InstantRow): int32	
getRow	db_sqlite.html#getRow,DbConn,SqlQuery,varargs[string,]	db_sqlite: getRow(db: DbConn; query: SqlQuery; args: varargs[string, `$`]): Row	
getAllRows	db_sqlite.html#getAllRows,DbConn,SqlQuery,varargs[string,]	db_sqlite: getAllRows(db: DbConn; query: SqlQuery; args: varargs[string, `$`]): seq[Row]	
rows	db_sqlite.html#rows.i,DbConn,SqlQuery,varargs[string,]	db_sqlite: rows(db: DbConn; query: SqlQuery; args: varargs[string, `$`]): Row	
getValue	db_sqlite.html#getValue,DbConn,SqlQuery,varargs[string,]	db_sqlite: getValue(db: DbConn; query: SqlQuery; args: varargs[string, `$`]): string	
tryInsertID	db_sqlite.html#tryInsertID,DbConn,SqlQuery,varargs[string,]	db_sqlite: tryInsertID(db: DbConn; query: SqlQuery; args: varargs[string, `$`]): int64	
insertID	db_sqlite.html#insertID,DbConn,SqlQuery,varargs[string,]	db_sqlite: insertID(db: DbConn; query: SqlQuery; args: varargs[string, `$`]): int64	
execAffectedRows	db_sqlite.html#execAffectedRows,DbConn,SqlQuery,varargs[string,]	db_sqlite: execAffectedRows(db: DbConn; query: SqlQuery; args: varargs[string, `$`]): int64	
close	db_sqlite.html#close,DbConn	db_sqlite: close(db: DbConn)	
open	db_sqlite.html#open,string,string,string,string	db_sqlite: open(connection, user, password, database: string): DbConn	
setEncoding	db_sqlite.html#setEncoding,DbConn,string	db_sqlite: setEncoding(connection: DbConn; encoding: string): bool	
