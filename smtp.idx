Message	smtp.html#Message	smtp: Message	
ReplyError	smtp.html#ReplyError	smtp: ReplyError	
Smtp	smtp.html#Smtp	smtp: Smtp	
AsyncSmtp	smtp.html#AsyncSmtp	smtp: AsyncSmtp	
createMessage	smtp.html#createMessage,string,string,seq[string],seq[string],openArray[tuple[string,string]]	smtp: createMessage(mSubject, mBody: string; mTo, mCc: seq[string];\n              otherHeaders: openArray[tuple[name, value: string]]): Message	
createMessage	smtp.html#createMessage,string,string,seq[string],seq[string]	smtp: createMessage(mSubject, mBody: string; mTo, mCc: seq[string] = @[]): Message	
`$`	smtp.html#$,Message	smtp: `$`(msg: Message): string	
newSmtp	smtp.html#newSmtp,SslContext	smtp: newSmtp(useSsl = false; debug = false; sslContext: SslContext = nil): Smtp	
newAsyncSmtp	smtp.html#newAsyncSmtp,SslContext	smtp: newAsyncSmtp(useSsl = false; debug = false; sslContext: SslContext = nil): AsyncSmtp	
connect	smtp.html#connect,AsyncSmtp,string,Port	smtp: connect(smtp: AsyncSmtp; address: string; port: Port): Future[void]	
connect	smtp.html#connect,Smtp,string,Port	smtp: connect(smtp: Smtp; address: string; port: Port)	
auth	smtp.html#auth,AsyncSmtp,string,string	smtp: auth(smtp: AsyncSmtp; username, password: string): Future[void]	
auth	smtp.html#auth,Smtp,string,string	smtp: auth(smtp: Smtp; username, password: string)	
sendMail	smtp.html#sendMail,AsyncSmtp,string,seq[string],string	smtp: sendMail(smtp: AsyncSmtp; fromAddr: string; toAddrs: seq[string]; msg: string): Future[\n    void]	
sendMail	smtp.html#sendMail,Smtp,string,seq[string],string	smtp: sendMail(smtp: Smtp; fromAddr: string; toAddrs: seq[string]; msg: string)	
close	smtp.html#close,AsyncSmtp	smtp: close(smtp: AsyncSmtp): Future[void]	
close	smtp.html#close,Smtp	smtp: close(smtp: Smtp)	
