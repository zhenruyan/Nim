ScgiError	scgi.html#ScgiError	scgi: ScgiError	
raiseScgiError	scgi.html#raiseScgiError,string	scgi: raiseScgiError(msg: string)	
ScgiState	scgi.html#ScgiState	scgi: ScgiState	
AsyncScgiState	scgi.html#AsyncScgiState	scgi: AsyncScgiState	
open	scgi.html#open,ScgiState,string	scgi: open(s: var ScgiState; port = Port(4000); address = &quot;127.0.0.1&quot;; reuseAddr = false)	
close	scgi.html#close,ScgiState	scgi: close(s: var ScgiState)	
next	scgi.html#next,ScgiState,int	scgi: next(s: var ScgiState; timeout: int = -1): bool	
writeStatusOkTextContent	scgi.html#writeStatusOkTextContent,Socket,string	scgi: writeStatusOkTextContent(c: Socket; contentType = &quot;text&#x2F;html&quot;)	
run	scgi.html#run,proc(Socket,string,StringTableRef)	scgi: run(handleRequest: proc (client: Socket; input: string; headers: StringTableRef): bool {.\n    nimcall, gcsafe.}; port = Port(4000))	
open	scgi.html#open,proc(AsyncSocket,string,StringTableRef),string	scgi: open(handleRequest: proc (client: AsyncSocket; input: string; headers: StringTableRef) {.\n    closure, gcsafe.}; port = Port(4000); address = &quot;127.0.0.1&quot;; reuseAddr = false): AsyncScgiState	
register	scgi.html#register,Dispatcher,AsyncScgiState	scgi: register(d: Dispatcher; s: AsyncScgiState): Delegate	
close	scgi.html#close,AsyncScgiState	scgi: close(s: AsyncScgiState)	
