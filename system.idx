Module system	system.html#module-system	 Module system	
int	system.html#int	system: int	
int8	system.html#int8	system: int8	
int16	system.html#int16	system: int16	
int32	system.html#int32	system: int32	
int64	system.html#int64	system: int64	
uint	system.html#uint	system: uint	
uint8	system.html#uint8	system: uint8	
uint16	system.html#uint16	system: uint16	
uint32	system.html#uint32	system: uint32	
uint64	system.html#uint64	system: uint64	
float	system.html#float	system: float	
float32	system.html#float32	system: float32	
float64	system.html#float64	system: float64	
bool	system.html#bool	system: bool	
char	system.html#char	system: char	
string	system.html#string	system: string	
cstring	system.html#cstring	system: cstring	
pointer	system.html#pointer	system: pointer	
typedesc	system.html#typedesc	system: typedesc	
on	system.html#on	system: on	
off	system.html#off	system: off	
`or`	system.html#or,typedesc,typedesc	system: `or`(a, b: typedesc): typedesc	
`and`	system.html#and,typedesc,typedesc	system: `and`(a, b: typedesc): typedesc	
`not`	system.html#not,typedesc	system: `not`(a: typedesc): typedesc	
Ordinal	system.html#Ordinal	system: Ordinal	
`ptr`	system.html#ptr	system: ptr	
`ref`	system.html#ref	system: ref	
void	system.html#void	system: void	
auto	system.html#auto	system: auto	
any	system.html#any	system: any	
untyped	system.html#untyped	system: untyped	
typed	system.html#typed	system: typed	
SomeSignedInt	system.html#SomeSignedInt	system: SomeSignedInt	
SomeUnsignedInt	system.html#SomeUnsignedInt	system: SomeUnsignedInt	
SomeInteger	system.html#SomeInteger	system: SomeInteger	
SomeOrdinal	system.html#SomeOrdinal	system: SomeOrdinal	
SomeFloat	system.html#SomeFloat	system: SomeFloat	
SomeNumber	system.html#SomeNumber	system: SomeNumber	
defined	system.html#defined,untyped	system: defined(x: untyped): bool	
declared	system.html#declared,untyped	system: declared(x: untyped): bool	
declaredInScope	system.html#declaredInScope,untyped	system: declaredInScope(x: untyped): bool	
`addr`	system.html#addr,T	system: `addr`[T](x: var T): ptr T	
unsafeAddr	system.html#unsafeAddr,T	system: unsafeAddr[T](x: T): ptr T	
`static`	system.html#static	system: static	
`type`	system.html#type	system: type	
typeOfProc	system.html#typeOfProc	TypeOfMode.typeOfProc	
typeOfIter	system.html#typeOfIter	TypeOfMode.typeOfIter	
TypeOfMode	system.html#TypeOfMode	system: TypeOfMode	
typeof	system.html#typeof,untyped	system: typeof(x: untyped; mode = typeOfIter): typedesc	
`not`	system.html#not,bool	system: `not`(x: bool): bool	
`and`	system.html#and,bool,bool	system: `and`(x, y: bool): bool	
`or`	system.html#or,bool,bool	system: `or`(x, y: bool): bool	
`xor`	system.html#xor,bool,bool	system: `xor`(x, y: bool): bool	
internalNew	system.html#internalNew,ref.T	system: internalNew[T](a: var ref T)	
new	system.html#new,ref.T,proc(ref.T)	system: new[T](a: var ref T; finalizer: proc (x: ref T) {.nimcall.})	
object branch transition	system.html#object-branch-transition_1	Module system	
reset	system.html#reset,T	system: reset[T](obj: var T)	
wasMoved	system.html#wasMoved,T	system: wasMoved[T](obj: var T)	
move	system.html#move,T	system: move[T](x: var T): T	
range	system.html#range	system: range	
array	system.html#array	system: array	
openArray	system.html#openArray	system: openArray	
varargs	system.html#varargs	system: varargs	
seq	system.html#seq	system: seq	
set	system.html#set	system: set	
UncheckedArray	system.html#UncheckedArray	system: UncheckedArray	
sink	system.html#sink	system: sink	
lent	system.html#lent	system: lent	
high	system.html#high,T	system: high[T: Ordinal](x: T): T	
INT_MAX	system.html#int-max_1	Module system	
MAX_INT	system.html#max-int_1	Module system	
high	system.html#high,typedesc[T]	system: high[T: Ordinal | enum](x: typedesc[T]): T	
high	system.html#high,openArray[T]	system: high[T](x: openArray[T]): int	
high	system.html#high,array[I,T]	system: high[I, T](x: array[I, T]): I	
high	system.html#high,typedesc[array[I,T]]	system: high[I, T](x: typedesc[array[I, T]]): I	
high	system.html#high,cstring	system: high(x: cstring): int	
high	system.html#high,string	system: high(x: string): int	
INT_MIN	system.html#int-min_1	Module system	
MIN_INT	system.html#min-int_1	Module system	
low	system.html#low,typedesc[T]	system: low[T: Ordinal | enum](x: typedesc[T]): T	
low	system.html#low,openArray[T]	system: low[T](x: openArray[T]): int	
low	system.html#low,array[I,T]	system: low[I, T](x: array[I, T]): I	
low	system.html#low,T	system: low[T](x: T): T	
low	system.html#low,typedesc[array[I,T]]	system: low[I, T](x: typedesc[array[I, T]]): I	
low	system.html#low,cstring	system: low(x: cstring): int	
low	system.html#low,string	system: low(x: string): int	
shallow copy	system.html#shallow-copy_1	Module system	
shallowCopy	system.html#shallowCopy,T,T	system: shallowCopy[T](x: var T; y: T)	
`[]`	system.html#[],T,I	system: `[]`[I: Ordinal; T](a: T; i: I): T	
`[]=`	system.html#[]=,T,I,S	system: `[]=`[I: Ordinal; T, S](a: T; i: I; x: S)	
`=`	system.html#=,T,T	system: `=`[T](dest: var T; src: T)	
destructor	system.html#destructor_1	Module system	
`=destroy`	system.html#=destroy,T	system: `=destroy`[T](x: var T)	
sink	system.html#sink_1	Module system	
`=sink`	system.html#=sink,T,T	system: `=sink`[T](x: var T; y: T)	
HSlice	system.html#HSlice	system: HSlice	
Slice	system.html#Slice	system: Slice	
slice	system.html#slice_1	Module system	
`..`	system.html#..,T,U	system: `..`[T, U](a: T; b: U): HSlice[T, U]	
slice	system.html#slice_2	Module system	
`..`	system.html#..,T	system: `..`[T](b: T): HSlice[int, T]	
`==`	system.html#==,Enum,Enum	system: `==`[Enum: enum](x, y: Enum): bool	
`==`	system.html#==,pointer,pointer	system: `==`(x, y: pointer): bool	
`==`	system.html#==,string,string	system: `==`(x, y: string): bool	
`==`	system.html#==,char,char	system: `==`(x, y: char): bool	
`==`	system.html#==,bool,bool	system: `==`(x, y: bool): bool	
`==`	system.html#==,set[T],set[T]	system: `==`[T](x, y: set[T]): bool	
`==`	system.html#==,ref.T,ref.T	system: `==`[T](x, y: ref T): bool	
`==`	system.html#==,ptr.T,ptr.T	system: `==`[T](x, y: ptr T): bool	
`==`	system.html#==,T,T	system: `==`[T: proc](x, y: T): bool	
`&lt;=`	system.html#<=,Enum,Enum	system: `&lt;=`[Enum: enum](x, y: Enum): bool	
`&lt;=`	system.html#<=,string,string	system: `&lt;=`(x, y: string): bool	
`&lt;=`	system.html#<=,char,char	system: `&lt;=`(x, y: char): bool	
`&lt;=`	system.html#<=,set[T],set[T]	system: `&lt;=`[T](x, y: set[T]): bool	
`&lt;=`	system.html#<=,bool,bool	system: `&lt;=`(x, y: bool): bool	
`&lt;=`	system.html#<=,ref.T,ref.T	system: `&lt;=`[T](x, y: ref T): bool	
`&lt;=`	system.html#<=,pointer,pointer	system: `&lt;=`(x, y: pointer): bool	
`&lt;`	system.html#<,Enum,Enum	system: `&lt;`[Enum: enum](x, y: Enum): bool	
`&lt;`	system.html#<,string,string	system: `&lt;`(x, y: string): bool	
`&lt;`	system.html#<,char,char	system: `&lt;`(x, y: char): bool	
`&lt;`	system.html#<,set[T],set[T]	system: `&lt;`[T](x, y: set[T]): bool	
`&lt;`	system.html#<,bool,bool	system: `&lt;`(x, y: bool): bool	
`&lt;`	system.html#<,ref.T,ref.T	system: `&lt;`[T](x, y: ref T): bool	
`&lt;`	system.html#<,ptr.T,ptr.T	system: `&lt;`[T](x, y: ptr T): bool	
`&lt;`	system.html#<,pointer,pointer	system: `&lt;`(x, y: pointer): bool	
`!=`	system.html#!=.t,untyped,untyped	system: `!=`(x, y: untyped): untyped	
`&gt;=`	system.html#>=.t,untyped,untyped	system: `&gt;=`(x, y: untyped): untyped	
`&gt;`	system.html#>.t,untyped,untyped	system: `&gt;`(x, y: untyped): untyped	
appType	system.html#appType	system: appType	
NoFakeVars	system.html#NoFakeVars	system: NoFakeVars	
byte	system.html#byte	system: byte	
Natural	system.html#Natural	system: Natural	
Positive	system.html#Positive	system: Positive	
RootObj	system.html#RootObj	system: RootObj	
RootRef	system.html#RootRef	system: RootRef	
RootEffect	system.html#RootEffect	system: RootEffect	
TimeEffect	system.html#TimeEffect	system: TimeEffect	
IOEffect	system.html#IOEffect	system: IOEffect	
ReadIOEffect	system.html#ReadIOEffect	system: ReadIOEffect	
WriteIOEffect	system.html#WriteIOEffect	system: WriteIOEffect	
ExecIOEffect	system.html#ExecIOEffect	system: ExecIOEffect	
StackTraceEntry	system.html#StackTraceEntry	system: StackTraceEntry	
Exception	system.html#Exception	system: Exception	
Defect	system.html#Defect	system: Defect	
CatchableError	system.html#CatchableError	system: CatchableError	
IOError	system.html#IOError	system: IOError	
EOFError	system.html#EOFError	system: EOFError	
OSError	system.html#OSError	system: OSError	
LibraryError	system.html#LibraryError	system: LibraryError	
ResourceExhaustedError	system.html#ResourceExhaustedError	system: ResourceExhaustedError	
ArithmeticError	system.html#ArithmeticError	system: ArithmeticError	
DivByZeroError	system.html#DivByZeroError	system: DivByZeroError	
OverflowError	system.html#OverflowError	system: OverflowError	
AccessViolationError	system.html#AccessViolationError	system: AccessViolationError	
AssertionError	system.html#AssertionError	system: AssertionError	
ValueError	system.html#ValueError	system: ValueError	
KeyError	system.html#KeyError	system: KeyError	
OutOfMemError	system.html#OutOfMemError	system: OutOfMemError	
IndexError	system.html#IndexError	system: IndexError	
FieldError	system.html#FieldError	system: FieldError	
RangeError	system.html#RangeError	system: RangeError	
StackOverflowError	system.html#StackOverflowError	system: StackOverflowError	
ReraiseError	system.html#ReraiseError	system: ReraiseError	
ObjectAssignmentError	system.html#ObjectAssignmentError	system: ObjectAssignmentError	
ObjectConversionError	system.html#ObjectConversionError	system: ObjectConversionError	
FloatingPointError	system.html#FloatingPointError	system: FloatingPointError	
FloatInvalidOpError	system.html#FloatInvalidOpError	system: FloatInvalidOpError	
FloatDivByZeroError	system.html#FloatDivByZeroError	system: FloatDivByZeroError	
FloatOverflowError	system.html#FloatOverflowError	system: FloatOverflowError	
FloatUnderflowError	system.html#FloatUnderflowError	system: FloatUnderflowError	
FloatInexactError	system.html#FloatInexactError	system: FloatInexactError	
DeadThreadError	system.html#DeadThreadError	system: DeadThreadError	
NilAccessError	system.html#NilAccessError	system: NilAccessError	
MoveError	system.html#MoveError	system: MoveError	
JsRoot	system.html#JsRoot	system: JsRoot	
unsafeNew	system.html#unsafeNew,ref.T,Natural	system: unsafeNew[T](a: var ref T; size: Natural)	
sizeof	system.html#sizeof,T	system: sizeof[T](x: T): int	
alignof	system.html#alignof,T	system: alignof[T](x: T): int	
alignof	system.html#alignof,typedesc	system: alignof(x: typedesc): int	
offsetOf	system.html#offsetOf.t,typedesc[T],untyped	system: offsetOf[T; ](t: typedesc[T]; member: untyped): int	
offsetOf	system.html#offsetOf.t,T,untyped	system: offsetOf[T](value: T; member: untyped): int	
sizeof	system.html#sizeof,typedesc	system: sizeof(x: typedesc): int	
`&lt;`	system.html#<,Ordinal[T]	system: `&lt;`[T](x: Ordinal[T]): T	
succ	system.html#succ,T,int	system: succ[T: Ordinal](x: T; y = 1): T	
pred	system.html#pred,T,int	system: pred[T: Ordinal](x: T; y = 1): T	
inc	system.html#inc,T,int	system: inc[T: Ordinal | uint | uint64](x: var T; y = 1)	
dec	system.html#dec,T,int	system: dec[T: Ordinal | uint | uint64](x: var T; y = 1)	
newSeq	system.html#newSeq,seq[T],Natural	system: newSeq[T](s: var seq[T]; len: Natural)	
newSeq	system.html#newSeq,	system: newSeq[T](len = 0.Natural): seq[T]	
newSeqOfCap	system.html#newSeqOfCap,Natural	system: newSeqOfCap[T](cap: Natural): seq[T]	
newSeqUninitialized	system.html#newSeqUninitialized,Natural	system: newSeqUninitialized[T: SomeNumber](len: Natural): seq[T]	
len	system.html#len,TOpenArray	system: len[TOpenArray: openArray | varargs](x: TOpenArray): int	
len	system.html#len,string	system: len(x: string): int	
len	system.html#len,cstring	system: len(x: cstring): int	
len	system.html#len,	system: len(x: (type array) | array): int	
len	system.html#len,seq[T]	system: len[T](x: seq[T]): int	
incl	system.html#incl,set[T],T	system: incl[T](x: var set[T]; y: T)	
incl	system.html#incl.t,set[T],set[T]	system: incl[T](s: var set[T]; flags: set[T])	
excl	system.html#excl,set[T],T	system: excl[T](x: var set[T]; y: T)	
excl	system.html#excl.t,set[T],set[T]	system: excl[T](s: var set[T]; flags: set[T])	
card	system.html#card,set[T]	system: card[T](x: set[T]): int	
ord	system.html#ord,T	system: ord[T: Ordinal | enum](x: T): int	
chr	system.html#chr,range[]	system: chr(u: range[0 .. 255]): char	
ze	system.html#ze,int8	system: ze(x: int8): int	
ze	system.html#ze,int16	system: ze(x: int16): int	
ze64	system.html#ze64,int8	system: ze64(x: int8): int64	
ze64	system.html#ze64,int16	system: ze64(x: int16): int64	
ze64	system.html#ze64,int32	system: ze64(x: int32): int64	
ze64	system.html#ze64,int	system: ze64(x: int): int64	
toU8	system.html#toU8,int	system: toU8(x: int): int8	
toU16	system.html#toU16,int	system: toU16(x: int): int16	
toU32	system.html#toU32,int64	system: toU32(x: int64): int32	
`+`	system.html#+,int	system: `+`(x: int): int	
`+`	system.html#+,int8	system: `+`(x: int8): int8	
`+`	system.html#+,int16	system: `+`(x: int16): int16	
`+`	system.html#+,int32	system: `+`(x: int32): int32	
`+`	system.html#+,int64	system: `+`(x: int64): int64	
`-`	system.html#-,int	system: `-`(x: int): int	
`-`	system.html#-,int8	system: `-`(x: int8): int8	
`-`	system.html#-,int16	system: `-`(x: int16): int16	
`-`	system.html#-,int32	system: `-`(x: int32): int32	
`-`	system.html#-,int64	system: `-`(x: int64): int64	
`not`	system.html#not,int	system: `not`(x: int): int	
`not`	system.html#not,int8	system: `not`(x: int8): int8	
`not`	system.html#not,int16	system: `not`(x: int16): int16	
`not`	system.html#not,int32	system: `not`(x: int32): int32	
`not`	system.html#not,int64	system: `not`(x: int64): int64	
`+`	system.html#+,int,int	system: `+`(x, y: int): int	
`+`	system.html#+,int8,int8	system: `+`(x, y: int8): int8	
`+`	system.html#+,int16,int16	system: `+`(x, y: int16): int16	
`+`	system.html#+,int32,int32	system: `+`(x, y: int32): int32	
`+`	system.html#+,int64,int64	system: `+`(x, y: int64): int64	
`-`	system.html#-,int,int	system: `-`(x, y: int): int	
`-`	system.html#-,int8,int8	system: `-`(x, y: int8): int8	
`-`	system.html#-,int16,int16	system: `-`(x, y: int16): int16	
`-`	system.html#-,int32,int32	system: `-`(x, y: int32): int32	
`-`	system.html#-,int64,int64	system: `-`(x, y: int64): int64	
`*`	system.html#*,int,int	system: `*`(x, y: int): int	
`*`	system.html#*,int8,int8	system: `*`(x, y: int8): int8	
`*`	system.html#*,int16,int16	system: `*`(x, y: int16): int16	
`*`	system.html#*,int32,int32	system: `*`(x, y: int32): int32	
`*`	system.html#*,int64,int64	system: `*`(x, y: int64): int64	
`div`	system.html#div,int,int	system: `div`(x, y: int): int	
`div`	system.html#div,int8,int8	system: `div`(x, y: int8): int8	
`div`	system.html#div,int16,int16	system: `div`(x, y: int16): int16	
`div`	system.html#div,int32,int32	system: `div`(x, y: int32): int32	
`div`	system.html#div,int64,int64	system: `div`(x, y: int64): int64	
`mod`	system.html#mod,int,int	system: `mod`(x, y: int): int	
`mod`	system.html#mod,int8,int8	system: `mod`(x, y: int8): int8	
`mod`	system.html#mod,int16,int16	system: `mod`(x, y: int16): int16	
`mod`	system.html#mod,int32,int32	system: `mod`(x, y: int32): int32	
`mod`	system.html#mod,int64,int64	system: `mod`(x, y: int64): int64	
`shr`	system.html#shr,int,SomeInteger	system: `shr`(x: int; y: SomeInteger): int	
`shr`	system.html#shr,int8,SomeInteger	system: `shr`(x: int8; y: SomeInteger): int8	
`shr`	system.html#shr,int16,SomeInteger	system: `shr`(x: int16; y: SomeInteger): int16	
`shr`	system.html#shr,int32,SomeInteger	system: `shr`(x: int32; y: SomeInteger): int32	
`shr`	system.html#shr,int64,SomeInteger	system: `shr`(x: int64; y: SomeInteger): int64	
`shl`	system.html#shl,int,SomeInteger	system: `shl`(x: int; y: SomeInteger): int	
`shl`	system.html#shl,int8,SomeInteger	system: `shl`(x: int8; y: SomeInteger): int8	
`shl`	system.html#shl,int16,SomeInteger	system: `shl`(x: int16; y: SomeInteger): int16	
`shl`	system.html#shl,int32,SomeInteger	system: `shl`(x: int32; y: SomeInteger): int32	
`shl`	system.html#shl,int64,SomeInteger	system: `shl`(x: int64; y: SomeInteger): int64	
ashr	system.html#ashr,int,SomeInteger	system: ashr(x: int; y: SomeInteger): int	
ashr	system.html#ashr,int8,SomeInteger	system: ashr(x: int8; y: SomeInteger): int8	
ashr	system.html#ashr,int16,SomeInteger	system: ashr(x: int16; y: SomeInteger): int16	
ashr	system.html#ashr,int32,SomeInteger	system: ashr(x: int32; y: SomeInteger): int32	
ashr	system.html#ashr,int64,SomeInteger	system: ashr(x: int64; y: SomeInteger): int64	
`and`	system.html#and,int,int	system: `and`(x, y: int): int	
`and`	system.html#and,int8,int8	system: `and`(x, y: int8): int8	
`and`	system.html#and,int16,int16	system: `and`(x, y: int16): int16	
`and`	system.html#and,int32,int32	system: `and`(x, y: int32): int32	
`and`	system.html#and,int64,int64	system: `and`(x, y: int64): int64	
`or`	system.html#or,int,int	system: `or`(x, y: int): int	
`or`	system.html#or,int8,int8	system: `or`(x, y: int8): int8	
`or`	system.html#or,int16,int16	system: `or`(x, y: int16): int16	
`or`	system.html#or,int32,int32	system: `or`(x, y: int32): int32	
`or`	system.html#or,int64,int64	system: `or`(x, y: int64): int64	
`xor`	system.html#xor,int,int	system: `xor`(x, y: int): int	
`xor`	system.html#xor,int8,int8	system: `xor`(x, y: int8): int8	
`xor`	system.html#xor,int16,int16	system: `xor`(x, y: int16): int16	
`xor`	system.html#xor,int32,int32	system: `xor`(x, y: int32): int32	
`xor`	system.html#xor,int64,int64	system: `xor`(x, y: int64): int64	
`==`	system.html#==,int,int	system: `==`(x, y: int): bool	
`==`	system.html#==,int8,int8	system: `==`(x, y: int8): bool	
`==`	system.html#==,int16,int16	system: `==`(x, y: int16): bool	
`==`	system.html#==,int32,int32	system: `==`(x, y: int32): bool	
`==`	system.html#==,int64,int64	system: `==`(x, y: int64): bool	
`&lt;=`	system.html#<=,int,int	system: `&lt;=`(x, y: int): bool	
`&lt;=`	system.html#<=,int8,int8	system: `&lt;=`(x, y: int8): bool	
`&lt;=`	system.html#<=,int16,int16	system: `&lt;=`(x, y: int16): bool	
`&lt;=`	system.html#<=,int32,int32	system: `&lt;=`(x, y: int32): bool	
`&lt;=`	system.html#<=,int64,int64	system: `&lt;=`(x, y: int64): bool	
`&lt;`	system.html#<,int,int	system: `&lt;`(x, y: int): bool	
`&lt;`	system.html#<,int8,int8	system: `&lt;`(x, y: int8): bool	
`&lt;`	system.html#<,int16,int16	system: `&lt;`(x, y: int16): bool	
`&lt;`	system.html#<,int32,int32	system: `&lt;`(x, y: int32): bool	
`&lt;`	system.html#<,int64,int64	system: `&lt;`(x, y: int64): bool	
`+%`	system.html#+%,IntMax32,IntMax32	system: `+%`(x, y: IntMax32): IntMax32	
`+%`	system.html#+%,int64,int64	system: `+%`(x, y: int64): int64	
`-%`	system.html#-%,IntMax32,IntMax32	system: `-%`(x, y: IntMax32): IntMax32	
`-%`	system.html#-%,int64,int64	system: `-%`(x, y: int64): int64	
`*%`	system.html#*%,IntMax32,IntMax32	system: `*%`(x, y: IntMax32): IntMax32	
`*%`	system.html#*%,int64,int64	system: `*%`(x, y: int64): int64	
`/%`	system.html#/%,IntMax32,IntMax32	system: `&#x2F;%`(x, y: IntMax32): IntMax32	
`/%`	system.html#/%,int64,int64	system: `&#x2F;%`(x, y: int64): int64	
`%%`	system.html#%%,IntMax32,IntMax32	system: `%%`(x, y: IntMax32): IntMax32	
`%%`	system.html#%%,int64,int64	system: `%%`(x, y: int64): int64	
`&lt;=%`	system.html#<=%,IntMax32,IntMax32	system: `&lt;=%`(x, y: IntMax32): bool	
`&lt;=%`	system.html#<=%,int64,int64	system: `&lt;=%`(x, y: int64): bool	
`&lt;%`	system.html#<%,IntMax32,IntMax32	system: `&lt;%`(x, y: IntMax32): bool	
`&lt;%`	system.html#<%,int64,int64	system: `&lt;%`(x, y: int64): bool	
`not`	system.html#not,T	system: `not`[T: SomeUnsignedInt](x: T): T	
`shr`	system.html#shr,T,SomeInteger	system: `shr`[T: SomeUnsignedInt](x: T; y: SomeInteger): T	
`shl`	system.html#shl,T,SomeInteger	system: `shl`[T: SomeUnsignedInt](x: T; y: SomeInteger): T	
`and`	system.html#and,T,T	system: `and`[T: SomeUnsignedInt](x, y: T): T	
`or`	system.html#or,T,T	system: `or`[T: SomeUnsignedInt](x, y: T): T	
`xor`	system.html#xor,T,T	system: `xor`[T: SomeUnsignedInt](x, y: T): T	
`==`	system.html#==,T,T_2	system: `==`[T: SomeUnsignedInt](x, y: T): bool	
`+`	system.html#+,T,T	system: `+`[T: SomeUnsignedInt](x, y: T): T	
`-`	system.html#-,T,T	system: `-`[T: SomeUnsignedInt](x, y: T): T	
`*`	system.html#*,T,T	system: `*`[T: SomeUnsignedInt](x, y: T): T	
`div`	system.html#div,T,T	system: `div`[T: SomeUnsignedInt](x, y: T): T	
`mod`	system.html#mod,T,T	system: `mod`[T: SomeUnsignedInt](x, y: T): T	
`&lt;=`	system.html#<=,T,T	system: `&lt;=`[T: SomeUnsignedInt](x, y: T): bool	
`&lt;`	system.html#<,T,T	system: `&lt;`[T: SomeUnsignedInt](x, y: T): bool	
`+`	system.html#+,float32	system: `+`(x: float32): float32	
`-`	system.html#-,float32	system: `-`(x: float32): float32	
`+`	system.html#+,float32,float32	system: `+`(x, y: float32): float32	
`-`	system.html#-,float32,float32	system: `-`(x, y: float32): float32	
`*`	system.html#*,float32,float32	system: `*`(x, y: float32): float32	
`/`	system.html#/,float32,float32	system: `&#x2F;`(x, y: float32): float32	
`+`	system.html#+,float	system: `+`(x: float): float	
`-`	system.html#-,float	system: `-`(x: float): float	
`+`	system.html#+,float,float	system: `+`(x, y: float): float	
`-`	system.html#-,float,float	system: `-`(x, y: float): float	
`*`	system.html#*,float,float	system: `*`(x, y: float): float	
`/`	system.html#/,float,float	system: `&#x2F;`(x, y: float): float	
`==`	system.html#==,float32,float32	system: `==`(x, y: float32): bool	
`&lt;=`	system.html#<=,float32,float32	system: `&lt;=`(x, y: float32): bool	
`&lt;`	system.html#<,float32,float32	system: `&lt;`(x, y: float32): bool	
`==`	system.html#==,float,float	system: `==`(x, y: float): bool	
`&lt;=`	system.html#<=,float,float	system: `&lt;=`(x, y: float): bool	
`&lt;`	system.html#<,float,float	system: `&lt;`(x, y: float): bool	
`*`	system.html#*,set[T],set[T]	system: `*`[T](x, y: set[T]): set[T]	
`+`	system.html#+,set[T],set[T]	system: `+`[T](x, y: set[T]): set[T]	
`-`	system.html#-,set[T],set[T]	system: `-`[T](x, y: set[T]): set[T]	
contains	system.html#contains,set[T],T	system: contains[T](x: set[T]; y: T): bool	
contains	system.html#contains,HSlice[U,V],W	system: contains[U, V, W](s: HSlice[U, V]; value: W): bool	
`in`	system.html#in.t,untyped,untyped	system: `in`(x, y: untyped): untyped	
`notin`	system.html#notin.t,untyped,untyped	system: `notin`(x, y: untyped): untyped	
`is`	system.html#is,T,S	system: `is`[T, S](x: T; y: S): bool	
`isnot`	system.html#isnot.t,untyped,untyped	system: `isnot`(x, y: untyped): untyped	
new	system.html#new,ref.T	system: new[T](a: var ref T)	
new	system.html#new,typedesc	system: new(t: typedesc): auto	
`of`	system.html#of,typedesc[T],typedesc[S]	system: `of`[T, S](x: typedesc[T]; y: typedesc[S]): bool	
`of`	system.html#of,T,typedesc[S]	system: `of`[T, S](x: T; y: typedesc[S]): bool	
`of`	system.html#of,T,S	system: `of`[T, S](x: T; y: S): bool	
cmp	system.html#cmp,T,T	system: cmp[T](x, y: T): int	
`@`	system.html#@,array[IDX,T]	system: `@`[IDX, T](a: array[IDX, T]): seq[T]	
setLen	system.html#setLen,seq[T],Natural	system: setLen[T](s: var seq[T]; newlen: Natural)	
setLen	system.html#setLen,string,Natural	system: setLen(s: var string; newlen: Natural)	
newString	system.html#newString,Natural	system: newString(len: Natural): string	
newStringOfCap	system.html#newStringOfCap,Natural	system: newStringOfCap(cap: Natural): string	
`&amp;`	system.html#&,string,char	system: `&amp;`(x: string; y: char): string	
`&amp;`	system.html#&,char,char	system: `&amp;`(x, y: char): string	
`&amp;`	system.html#&,string,string	system: `&amp;`(x, y: string): string	
`&amp;`	system.html#&,char,string	system: `&amp;`(x: char; y: string): string	
add	system.html#add,string,char	system: add(x: var string; y: char)	
add	system.html#add,string,string	system: add(x: var string; y: string)	
littleEndian	system.html#littleEndian	Endianness.littleEndian	
bigEndian	system.html#bigEndian	Endianness.bigEndian	
Endianness	system.html#Endianness	system: Endianness	
isMainModule	system.html#isMainModule	system: isMainModule	
CompileDate	system.html#CompileDate	system: CompileDate	
CompileTime	system.html#CompileTime	system: CompileTime	
cpuEndian	system.html#cpuEndian	system: cpuEndian	
hostOS	system.html#hostOS	system: hostOS	
hostCPU	system.html#hostCPU	system: hostCPU	
nimvm	system.html#nimvm	system: nimvm	
compileOption	system.html#compileOption,string	system: compileOption(option: string): bool	
compileOption	system.html#compileOption,string,string	system: compileOption(option, arg: string): bool	
nimEnableCovariance	system.html#nimEnableCovariance	system: nimEnableCovariance	
tainted	system.html#tainted_1	Module system	
TaintedString	system.html#TaintedString	system: TaintedString	
QuitSuccess	system.html#QuitSuccess	system: QuitSuccess	
QuitFailure	system.html#QuitFailure	system: QuitFailure	
programResult	system.html#programResult	system: programResult	
quit	system.html#quit,int	system: quit(errorcode: int = QuitSuccess)	
add	system.html#add,seq[T],T	system: add[T](x: var seq[T]; y: T)	
add	system.html#add,seq[T],openArray[T]	system: add[T](x: var seq[T]; y: openArray[T])	
del	system.html#del,seq[T],Natural	system: del[T](x: var seq[T]; i: Natural)	
delete	system.html#delete,seq[T],Natural	system: delete[T](x: var seq[T]; i: Natural)	
insert	system.html#insert,seq[T],T	system: insert[T](x: var seq[T]; item: T; i = 0.Natural)	
repr	system.html#repr,T	system: repr[T](x: T): string	
ByteAddress	system.html#ByteAddress	system: ByteAddress	
BiggestInt	system.html#BiggestInt	system: BiggestInt	
BiggestFloat	system.html#BiggestFloat	system: BiggestFloat	
BiggestUInt	system.html#BiggestUInt	system: BiggestUInt	
clong	system.html#clong	system: clong	
culong	system.html#culong	system: culong	
cchar	system.html#cchar	system: cchar	
cschar	system.html#cschar	system: cschar	
cshort	system.html#cshort	system: cshort	
cint	system.html#cint	system: cint	
csize	system.html#csize	system: csize	
clonglong	system.html#clonglong	system: clonglong	
cfloat	system.html#cfloat	system: cfloat	
cdouble	system.html#cdouble	system: cdouble	
clongdouble	system.html#clongdouble	system: clongdouble	
cuchar	system.html#cuchar	system: cuchar	
cushort	system.html#cushort	system: cushort	
cuint	system.html#cuint	system: cuint	
culonglong	system.html#culonglong	system: culonglong	
cstringArray	system.html#cstringArray	system: cstringArray	
PFloat32	system.html#PFloat32	system: PFloat32	
PFloat64	system.html#PFloat64	system: PFloat64	
PInt64	system.html#PInt64	system: PInt64	
PInt32	system.html#PInt32	system: PInt32	
toFloat	system.html#toFloat,int	system: toFloat(i: int): float	
toBiggestFloat	system.html#toBiggestFloat,BiggestInt	system: toBiggestFloat(i: BiggestInt): BiggestFloat	
toInt	system.html#toInt,float	system: toInt(f: float): int	
toBiggestInt	system.html#toBiggestInt,BiggestFloat	system: toBiggestInt(f: BiggestFloat): BiggestInt	
addQuitProc	system.html#addQuitProc,proc)	system: addQuitProc(quitProc: proc () {.noconv.})	
createU	system.html#createU,typedesc	system: createU(T: typedesc; size = 1.Positive): ptr T:type	
create	system.html#create,typedesc	system: create(T: typedesc; size = 1.Positive): ptr T:type	
resize	system.html#resize,ptr.T,Natural	system: resize[T](p: ptr T; newSize: Natural): ptr T	
createSharedU	system.html#createSharedU,typedesc	system: createSharedU(T: typedesc; size = 1.Positive): ptr T:type	
createShared	system.html#createShared,typedesc	system: createShared(T: typedesc; size = 1.Positive): ptr T:type	
resizeShared	system.html#resizeShared,ptr.T,Natural	system: resizeShared[T](p: ptr T; newSize: Natural): ptr T	
freeShared	system.html#freeShared,ptr.T	system: freeShared[T](p: ptr T)	
swap	system.html#swap,T,T	system: swap[T](a, b: var T)	
`&gt;=%`	system.html#>=%.t,untyped,untyped	system: `&gt;=%`(x, y: untyped): untyped	
`&gt;%`	system.html#>%.t,untyped,untyped	system: `&gt;%`(x, y: untyped): untyped	
toString	system.html#tostring_1	Module system	
`$`	system.html#$,int	system: `$`(x: int): string	
`$`	system.html#$,int64	system: `$`(x: int64): string	
`$`	system.html#$,float	system: `$`(x: float): string	
`$`	system.html#$,bool	system: `$`(x: bool): string	
`$`	system.html#$,char	system: `$`(x: char): string	
`$`	system.html#$,cstring	system: `$`(x: cstring): string	
`$`	system.html#$,string	system: `$`(x: string): string	
`$`	system.html#$,Enum	system: `$`[Enum: enum](x: Enum): string	
getRefcount	system.html#getRefcount,ref.T	system: getRefcount[T](x: ref T): int	
getRefcount	system.html#getRefcount,string	system: getRefcount(x: string): int	
getRefcount	system.html#getRefcount,seq[T]	system: getRefcount[T](x: seq[T]): int	
Inf	system.html#Inf	system: Inf	
NegInf	system.html#NegInf	system: NegInf	
NaN	system.html#NaN	system: NaN	
NimMajor	system.html#NimMajor	system: NimMajor	
NimMinor	system.html#NimMinor	system: NimMinor	
NimPatch	system.html#NimPatch	system: NimPatch	
NimVersion	system.html#NimVersion	system: NimVersion	
`|`	system.html#|,typedesc,typedesc	system: `|`(a, b: typedesc): typedesc	
countdown	system.html#countdown.i,T,T,Positive	system: countdown[T](a, b: T; step: Positive = 1): T	
countup	system.html#countup.i,T,T,Positive	system: countup[T](a, b: T; step: Positive = 1): T	
`..`	system.html#...i,T,T	system: `..`[T](a, b: T): T	
`..`	system.html#...i,int64,int64	system: `..`(a, b: int64): int64	
`..`	system.html#...i,int32,int32	system: `..`(a, b: int32): int32	
`..`	system.html#...i,uint64,uint64	system: `..`(a, b: uint64): uint64	
`..`	system.html#...i,uint32,uint32	system: `..`(a, b: uint32): uint32	
OpenMP	system.html#openmp_1	Module system	
`||`	system.html#||.i,S,T,string	system: `||`[S, T](a: S; b: T; annotation: static string = &quot;parallel for&quot;): T	
min	system.html#min,int,int	system: min(x, y: int): int	
min	system.html#min,int8,int8	system: min(x, y: int8): int8	
min	system.html#min,int16,int16	system: min(x, y: int16): int16	
min	system.html#min,int32,int32	system: min(x, y: int32): int32	
min	system.html#min,int64,int64	system: min(x, y: int64): int64	
min	system.html#min,openArray[T]	system: min[T](x: openArray[T]): T	
max	system.html#max,int,int	system: max(x, y: int): int	
max	system.html#max,int8,int8	system: max(x, y: int8): int8	
max	system.html#max,int16,int16	system: max(x, y: int16): int16	
max	system.html#max,int32,int32	system: max(x, y: int32): int32	
max	system.html#max,int64,int64	system: max(x, y: int64): int64	
max	system.html#max,openArray[T]	system: max[T](x: openArray[T]): T	
abs	system.html#abs,float	system: abs(x: float): float	
min	system.html#min,float,float	system: min(x, y: float): float	
max	system.html#max,float,float	system: max(x, y: float): float	
min	system.html#min,T,T	system: min[T](x, y: T): T	
max	system.html#max,T,T	system: max[T](x, y: T): T	
high	system.html#high,typedesc[SomeFloat]	system: high(T: typedesc[SomeFloat]): T:type	
low	system.html#low,typedesc[SomeFloat]	system: low(T: typedesc[SomeFloat]): T:type	
clamp	system.html#clamp,T,T,T	system: clamp[T](x, a, b: T): T	
len	system.html#len,HSlice[U: Ordinal,V: Ordinal]	system: len[U: Ordinal; V: Ordinal](x: HSlice[U, V]): int	
items	system.html#items.i,openArray[T]	system: items[T](a: openArray[T]): T	
mitems	system.html#mitems.i,openArray[T]	system: mitems[T](a: var openArray[T]): var T	
items	system.html#items.i,array[IX,T]	system: items[IX, T](a: array[IX, T]): T	
mitems	system.html#mitems.i,array[IX,T]	system: mitems[IX, T](a: var array[IX, T]): var T	
items	system.html#items.i,set[T]	system: items[T](a: set[T]): T	
items	system.html#items.i,cstring	system: items(a: cstring): char	
mitems	system.html#mitems.i,cstring	system: mitems(a: var cstring): var char	
items	system.html#items.i,typedesc[]	system: items(E: typedesc[enum]): E:type	
items	system.html#items.i,HSlice[T,T]	system: items[T](s: HSlice[T, T]): T	
pairs	system.html#pairs.i,openArray[T]	system: pairs[T](a: openArray[T]): tuple[key: int, val: T]	
mpairs	system.html#mpairs.i,openArray[T]	system: mpairs[T](a: var openArray[T]): tuple[key: int, val: var T]	
pairs	system.html#pairs.i,array[IX,T]	system: pairs[IX, T](a: array[IX, T]): tuple[key: IX, val: T]	
mpairs	system.html#mpairs.i,array[IX,T]	system: mpairs[IX, T](a: var array[IX, T]): tuple[key: IX, val: var T]	
pairs	system.html#pairs.i,seq[T]	system: pairs[T](a: seq[T]): tuple[key: int, val: T]	
mpairs	system.html#mpairs.i,seq[T]	system: mpairs[T](a: var seq[T]): tuple[key: int, val: var T]	
pairs	system.html#pairs.i,string	system: pairs(a: string): tuple[key: int, val: char]	
mpairs	system.html#mpairs.i,string	system: mpairs(a: var string): tuple[key: int, val: var char]	
pairs	system.html#pairs.i,cstring	system: pairs(a: cstring): tuple[key: int, val: char]	
mpairs	system.html#mpairs.i,cstring	system: mpairs(a: var cstring): tuple[key: int, val: var char]	
isNil	system.html#isNil,seq[T]	system: isNil[T](x: seq[T]): bool	
isNil	system.html#isNil,ref.T	system: isNil[T](x: ref T): bool	
isNil	system.html#isNil,string	system: isNil(x: string): bool	
isNil	system.html#isNil,ptr.T	system: isNil[T](x: ptr T): bool	
isNil	system.html#isNil,pointer	system: isNil(x: pointer): bool	
isNil	system.html#isNil,cstring	system: isNil(x: cstring): bool	
isNil	system.html#isNil,T	system: isNil[T: proc](x: T): bool	
`==`	system.html#==,array[I,T],array[I,T]	system: `==`[I, T](x, y: array[I, T]): bool	
`==`	system.html#==,openArray[T],openArray[T]	system: `==`[T](x, y: openArray[T]): bool	
`@`	system.html#@,openArray[T]	system: `@`[T](a: openArray[T]): seq[T]	
`&amp;`	system.html#&,seq[T],seq[T]	system: `&amp;`[T](x, y: seq[T]): seq[T]	
`&amp;`	system.html#&,seq[T],T	system: `&amp;`[T](x: seq[T]; y: T): seq[T]	
`&amp;`	system.html#&,T,seq[T]	system: `&amp;`[T](x: T; y: seq[T]): seq[T]	
`==`	system.html#==,seq[T],seq[T]	system: `==`[T](x, y: seq[T]): bool	
find	system.html#find,T,S	system: find[T, S](a: T; item: S): int	
contains	system.html#contains,openArray[T],T	system: contains[T](a: openArray[T]; item: T): bool	
pop	system.html#pop,seq[T]	system: pop[T](s: var seq[T]): T	
fields	system.html#fields.i,T	system: fields[T: tuple |\n    object](x: T): RootObj	
fields	system.html#fields.i,S,T	system: fields[S: tuple |\n    object; T: tuple |\n    object](x: S; y: T): tuple[a, b: untyped]	
fieldPairs	system.html#fieldPairs.i,T	system: fieldPairs[T: tuple |\n    object](x: T): RootObj	
fieldPairs	system.html#fieldPairs.i,S,T	system: fieldPairs[S: tuple |\n    object; T: tuple |\n    object](x: S; y: T): tuple[a, b: untyped]	
`==`	system.html#==,T,T_3	system: `==`[T: tuple |\n    object](x, y: T): bool	
`&lt;=`	system.html#<=,T,T_2	system: `&lt;=`[T: tuple](x, y: T): bool	
`&lt;`	system.html#<,T,T_2	system: `&lt;`[T: tuple](x, y: T): bool	
compiles	system.html#compiles,untyped	system: compiles(x: untyped): bool	
`$`	system.html#$,T	system: `$`[T: tuple |\n    object](x: T): string	
`$`	system.html#$,set[T]	system: `$`[T](x: set[T]): string	
`$`	system.html#$,seq[T]	system: `$`[T](x: seq[T]): string	
gcThroughput	system.html#gcThroughput	GC_Strategy.gcThroughput	
gcResponsiveness	system.html#gcResponsiveness	GC_Strategy.gcResponsiveness	
gcOptimizeTime	system.html#gcOptimizeTime	GC_Strategy.gcOptimizeTime	
gcOptimizeSpace	system.html#gcOptimizeSpace	GC_Strategy.gcOptimizeSpace	
GC_Strategy	system.html#GC_Strategy	system: GC_Strategy	
GC_ref	system.html#GC_ref,ref.T	system: GC_ref[T](x: ref T)	
GC_ref	system.html#GC_ref,seq[T]	system: GC_ref[T](x: seq[T])	
GC_ref	system.html#GC_ref,string	system: GC_ref(x: string)	
GC_unref	system.html#GC_unref,ref.T	system: GC_unref[T](x: ref T)	
GC_unref	system.html#GC_unref,seq[T]	system: GC_unref[T](x: seq[T])	
GC_unref	system.html#GC_unref,string	system: GC_unref(x: string)	
accumulateResult	system.html#accumulateResult.t,untyped	system: accumulateResult(iter: untyped)	
nimCoroutines	system.html#nimCoroutines	system: nimCoroutines	
globalRaiseHook	system.html#globalRaiseHook	system: globalRaiseHook	
localRaiseHook	system.html#localRaiseHook	system: localRaiseHook	
out of memory	system.html#out-of-memory_1	Module system	
outOfMemHook	system.html#outOfMemHook	system: outOfMemHook	
PFrame	system.html#PFrame	system: PFrame	
TFrame	system.html#TFrame	system: TFrame	
add	system.html#add,string,cstring	system: add(x: var string; y: cstring)	
echo	system.html#echo,varargs[typed,]	system: echo(x: varargs[typed, `$`])	
debugEcho	system.html#debugEcho,varargs[typed,]	system: debugEcho(x: varargs[typed, `$`])	
newException	system.html#newException.t,typedesc,string,ref.Exception	system: newException(exceptn: typedesc; message: string;\n             parentException: ref Exception = nil): untyped	
getTypeInfo	system.html#getTypeInfo,T	system: getTypeInfo[T](x: T): pointer	
abs	system.html#abs,int	system: abs(x: int): int	
abs	system.html#abs,int8	system: abs(x: int8): int8	
abs	system.html#abs,int16	system: abs(x: int16): int16	
abs	system.html#abs,int32	system: abs(x: int32): int32	
abs	system.html#abs,int64	system: abs(x: int64): int64	
likely	system.html#likely.t,bool	system: likely(val: bool): bool	
unlikely	system.html#unlikely.t,bool	system: unlikely(val: bool): bool	
fspSet	system.html#fspSet	FileSeekPos.fspSet	
fspCur	system.html#fspCur	FileSeekPos.fspCur	
fspEnd	system.html#fspEnd	FileSeekPos.fspEnd	
FileSeekPos	system.html#FileSeekPos	system: FileSeekPos	
File	system.html#File	system: File	
fmRead	system.html#fmRead	FileMode.fmRead	
fmWrite	system.html#fmWrite	FileMode.fmWrite	
fmReadWrite	system.html#fmReadWrite	FileMode.fmReadWrite	
fmReadWriteExisting	system.html#fmReadWriteExisting	FileMode.fmReadWriteExisting	
fmAppend	system.html#fmAppend	FileMode.fmAppend	
FileMode	system.html#FileMode	system: FileMode	
FileHandle	system.html#FileHandle	system: FileHandle	
zeroMem	system.html#zeroMem,pointer,Natural	system: zeroMem(p: pointer; size: Natural)	
copyMem	system.html#copyMem,pointer,pointer,Natural	system: copyMem(dest, source: pointer; size: Natural)	
moveMem	system.html#moveMem,pointer,pointer,Natural	system: moveMem(dest, source: pointer; size: Natural)	
equalMem	system.html#equalMem,pointer,pointer,Natural	system: equalMem(a, b: pointer; size: Natural): bool	
cmp	system.html#cmp,string,string	system: cmp(x, y: string): int	
stdin	system.html#stdin	system: stdin	
stdout	system.html#stdout	system: stdout	
stderr	system.html#stderr	system: stderr	
stdmsg	system.html#stdmsg.t,	system: stdmsg(): File	
open	system.html#open,File,string,FileMode,int	system: open(f: var File; filename: string; mode: FileMode = fmRead; bufSize: int = -1): bool	
open	system.html#open,File,FileHandle,FileMode	system: open(f: var File; filehandle: FileHandle; mode: FileMode = fmRead): bool	
open	system.html#open,string,FileMode,int	system: open(filename: string; mode: FileMode = fmRead; bufSize: int = -1): File	
reopen	system.html#reopen,File,string,FileMode	system: reopen(f: File; filename: string; mode: FileMode = fmRead): bool	
setStdIoUnbuffered	system.html#setStdIoUnbuffered,	system: setStdIoUnbuffered()	
close	system.html#close,File	system: close(f: File)	
endOfFile	system.html#endOfFile,File	system: endOfFile(f: File): bool	
readChar	system.html#readChar,File	system: readChar(f: File): char	
flushFile	system.html#flushFile,File	system: flushFile(f: File)	
readAll	system.html#readAll,File	system: readAll(file: File): TaintedString	
readFile	system.html#readFile,string	system: readFile(filename: string): TaintedString	
writeFile	system.html#writeFile,string,string	system: writeFile(filename, content: string)	
write	system.html#write,File,float32	system: write(f: File; r: float32)	
write	system.html#write,File,int	system: write(f: File; i: int)	
write	system.html#write,File,BiggestInt	system: write(f: File; i: BiggestInt)	
write	system.html#write,File,BiggestFloat	system: write(f: File; r: BiggestFloat)	
write	system.html#write,File,string	system: write(f: File; s: string)	
write	system.html#write,File,bool	system: write(f: File; b: bool)	
write	system.html#write,File,char	system: write(f: File; c: char)	
write	system.html#write,File,cstring	system: write(f: File; c: cstring)	
write	system.html#write,File,varargs[string,]	system: write(f: File; a: varargs[string, `$`])	
readLine	system.html#readLine,File	system: readLine(f: File): TaintedString	
readLine	system.html#readLine,File,TaintedString	system: readLine(f: File; line: var TaintedString): bool	
writeLine	system.html#writeLine,File,varargs[Ty,]	system: writeLine[Ty](f: File; x: varargs[Ty, `$`])	
getFileSize	system.html#getFileSize,File	system: getFileSize(f: File): int64	
readBytes	system.html#readBytes,File,openArray[],Natural,Natural	system: readBytes(f: File; a: var openArray[int8 | uint8]; start, len: Natural): int	
readChars	system.html#readChars,File,openArray[char],Natural,Natural	system: readChars(f: File; a: var openArray[char]; start, len: Natural): int	
readBuffer	system.html#readBuffer,File,pointer,Natural	system: readBuffer(f: File; buffer: pointer; len: Natural): int	
writeBytes	system.html#writeBytes,File,openArray[],Natural,Natural	system: writeBytes(f: File; a: openArray[int8 | uint8]; start, len: Natural): int	
writeChars	system.html#writeChars,File,openArray[char],Natural,Natural	system: writeChars(f: File; a: openArray[char]; start, len: Natural): int	
writeBuffer	system.html#writeBuffer,File,pointer,Natural	system: writeBuffer(f: File; buffer: pointer; len: Natural): int	
setFilePos	system.html#setFilePos,File,int64,FileSeekPos	system: setFilePos(f: File; pos: int64; relativeTo: FileSeekPos = fspSet)	
getFilePos	system.html#getFilePos,File	system: getFilePos(f: File): int64	
getFileHandle	system.html#getFileHandle,File	system: getFileHandle(f: File): FileHandle	
cstringArrayToSeq	system.html#cstringArrayToSeq,cstringArray,Natural	system: cstringArrayToSeq(a: cstringArray; len: Natural): seq[string]	
cstringArrayToSeq	system.html#cstringArrayToSeq,cstringArray	system: cstringArrayToSeq(a: cstringArray): seq[string]	
allocCStringArray	system.html#allocCStringArray,openArray[string]	system: allocCStringArray(a: openArray[string]): cstringArray	
deallocCStringArray	system.html#deallocCStringArray,cstringArray	system: deallocCStringArray(a: cstringArray)	
atomicInc	system.html#atomicInc,int,int	system: atomicInc(memLoc: var int; x: int = 1): int	
atomicDec	system.html#atomicDec,int,int	system: atomicDec(memLoc: var int; x: int = 1): int	
addAndFetch	system.html#addAndFetch,ptr.int,int	system: addAndFetch(p: ptr int; val: int): int	
cas	system.html#cas,ptr.T,T,T	system: cas[T: bool | int | ptr](p: ptr T; oldValue, newValue: T): bool	
cpuRelax	system.html#cpuRelax,	system: cpuRelax()	
setControlCHook	system.html#setControlCHook,proc)	system: setControlCHook(hook: proc () {.noconv.})	
writeStackTrace	system.html#writeStackTrace,	system: writeStackTrace()	
getStackTrace	system.html#getStackTrace,	system: getStackTrace(): string	
getStackTrace	system.html#getStackTrace,ref.Exception	system: getStackTrace(e: ref Exception): string	
errorMessageWriter	system.html#errorMessageWriter	system: errorMessageWriter	
getFrameState	system.html#getFrameState,	system: getFrameState(): FrameState	
setFrameState	system.html#setFrameState,FrameState	system: setFrameState(state: FrameState)	
getFrame	system.html#getFrame,	system: getFrame(): PFrame	
setFrame	system.html#setFrame,PFrame	system: setFrame(s: PFrame)	
getGcFrame	system.html#getGcFrame,	system: getGcFrame(): GcFrame	
popGcFrame	system.html#popGcFrame,	system: popGcFrame()	
setGcFrame	system.html#setGcFrame,GcFrame	system: setGcFrame(s: GcFrame)	
pushGcFrame	system.html#pushGcFrame,GcFrame	system: pushGcFrame(s: GcFrame)	
nativeStackTraceSupported	system.html#nativeStackTraceSupported	system: nativeStackTraceSupported	
stackTraceAvailable	system.html#stackTraceAvailable,	system: stackTraceAvailable(): bool	
onUnhandledException	system.html#onUnhandledException	system: onUnhandledException	
getStackTraceEntries	system.html#getStackTraceEntries,ref.Exception	system: getStackTraceEntries(e: ref Exception): seq[StackTraceEntry]	
iterToProc	system.html#iterToProc,typed,typedesc,untyped	system: iterToProc(iter: typed; envType: typedesc; procName: untyped)	
alloc	system.html#alloc,Natural	system: alloc(size: Natural): pointer	
alloc0	system.html#alloc0,Natural	system: alloc0(size: Natural): pointer	
dealloc	system.html#dealloc,pointer	system: dealloc(p: pointer)	
realloc	system.html#realloc,pointer,Natural	system: realloc(p: pointer; newSize: Natural): pointer	
getFreeMem	system.html#getFreeMem,	system: getFreeMem(): int	
getTotalMem	system.html#getTotalMem,	system: getTotalMem(): int	
getOccupiedMem	system.html#getOccupiedMem,	system: getOccupiedMem(): int	
getMaxMem	system.html#getMaxMem,	system: getMaxMem(): int	
allocShared	system.html#allocShared,Natural	system: allocShared(size: Natural): pointer	
allocShared0	system.html#allocShared0,Natural	system: allocShared0(size: Natural): pointer	
deallocShared	system.html#deallocShared,pointer	system: deallocShared(p: pointer)	
reallocShared	system.html#reallocShared,pointer,Natural	system: reallocShared(p: pointer; newSize: Natural): pointer	
ForeignCell	system.html#ForeignCell	system: ForeignCell	
protect	system.html#protect,pointer	system: protect(x: pointer): ForeignCell	
dispose	system.html#dispose,ForeignCell	system: dispose(x: ForeignCell)	
isNotForeign	system.html#isNotForeign,ForeignCell	system: isNotForeign(x: ForeignCell): bool	
setupForeignThreadGc	system.html#setupForeignThreadGc.t,	system: setupForeignThreadGc()	
tearDownForeignThreadGc	system.html#tearDownForeignThreadGc.t,	system: tearDownForeignThreadGc()	
nimGC_setStackBottom	system.html#nimGC_setStackBottom,pointer	system: nimGC_setStackBottom(theStackBottom: pointer)	
deallocHeap	system.html#deallocHeap,	system: deallocHeap(runFinalizers = true; allowGcAfterwards = true)	
gcInvariant	system.html#gcInvariant,	system: gcInvariant()	
GC_disable	system.html#GC_disable,	system: GC_disable()	
GC_enable	system.html#GC_enable,	system: GC_enable()	
GC_enableMarkAndSweep	system.html#GC_enableMarkAndSweep,	system: GC_enableMarkAndSweep()	
GC_disableMarkAndSweep	system.html#GC_disableMarkAndSweep,	system: GC_disableMarkAndSweep()	
GC_fullCollect	system.html#GC_fullCollect,	system: GC_fullCollect()	
GC_getStatistics	system.html#GC_getStatistics,	system: GC_getStatistics(): string	
add	system.html#add,string,int64	system: add(result: var string; x: int64)	
add	system.html#add,string,float	system: add(result: var string; x: float)	
`$`	system.html#$,uint64	system: `$`(x: uint64): string	
Utf16Char	system.html#Utf16Char	system: Utf16Char	
WideCString	system.html#WideCString	system: WideCString	
len	system.html#len,WideCString	system: len(w: WideCString): int	
newWideCString	system.html#newWideCString,cstring,int	system: newWideCString(source: cstring; L: int): WideCString	
newWideCString	system.html#newWideCString,cstring	system: newWideCString(s: cstring): WideCString	
newWideCString	system.html#newWideCString,string	system: newWideCString(s: string): WideCString	
`$`	system.html#$,WideCString,int,int	system: `$`(w: WideCString; estimate: int; replacement: int = 0x0000FFFD): string	
`$`	system.html#$,WideCString	system: `$`(s: WideCString): string	
lines	system.html#lines.i,string	system: lines(filename: string): TaintedString	
lines	system.html#lines.i,File	system: lines(f: File): TaintedString	
getCurrentException	system.html#getCurrentException,	system: getCurrentException(): ref Exception	
getCurrentExceptionMsg	system.html#getCurrentExceptionMsg,	system: getCurrentExceptionMsg(): string	
condition system	system.html#condition-system_1	Module system	
onRaise	system.html#onRaise,proc(ref.Exception)	system: onRaise(action: proc (e: ref Exception): bool {.closure.})	
setCurrentException	system.html#setCurrentException,ref.Exception	system: setCurrentException(exc: ref Exception)	
rawProc	system.html#rawProc,T	system: rawProc[T: proc](x: T): pointer	
rawEnv	system.html#rawEnv,T	system: rawEnv[T: proc](x: T): pointer	
finished	system.html#finished,T	system: finished[T: proc](x: T): bool	
`$`	system.html#$,array[IDX,T]	system: `$`[T, IDX](x: array[IDX, T]): string	
`$`	system.html#$,openArray[T]	system: `$`[T](x: openArray[T]): string	
quit	system.html#quit,string	system: quit(errormsg: string; errorcode = QuitFailure)	
`/`	system.html#/,int,int	system: `&#x2F;`(x, y: int): float	
BackwardsIndex	system.html#BackwardsIndex	system: BackwardsIndex	
roof	system.html#roof_1	Module system	
`^`	system.html#^.t,int	system: `^`(x: int): BackwardsIndex	
`..^`	system.html#..^.t,untyped,untyped	system: `..^`(a, b: untyped): untyped	
`..&lt;`	system.html#..<.t,untyped,untyped	system: `..&lt;`(a, b: untyped): untyped	
`..&lt;`	system.html#..<.i,T,T	system: `..&lt;`[T](a, b: T): T	
`[]`	system.html#[].t,string,int	system: `[]`(s: string; i: int): char	
`[]=`	system.html#[]=.t,string,int,char	system: `[]=`(s: string; i: int; val: char)	
`[]`	system.html#[],string,HSlice[T,U]	system: `[]`[T, U](s: string; x: HSlice[T, U]): string	
splice	system.html#splice_1	Module system	
`[]=`	system.html#[]=,string,HSlice[T,U],string	system: `[]=`[T, U](s: var string; x: HSlice[T, U]; b: string)	
`[]`	system.html#[],array[Idx,T],HSlice[U,V]	system: `[]`[Idx, T, U, V](a: array[Idx, T]; x: HSlice[U, V]): seq[T]	
`[]=`	system.html#[]=,array[Idx,T],HSlice[U,V],openArray[T]	system: `[]=`[Idx, T, U, V](a: var array[Idx, T]; x: HSlice[U, V]; b: openArray[T])	
`[]`	system.html#[],openArray[T],HSlice[U,V]	system: `[]`[T, U, V](s: openArray[T]; x: HSlice[U, V]): seq[T]	
splice	system.html#splice_2	Module system	
`[]=`	system.html#[]=,seq[T],HSlice[U,V],openArray[T]	system: `[]=`[T, U, V](s: var seq[T]; x: HSlice[U, V]; b: openArray[T])	
`[]`	system.html#[],openArray[T],BackwardsIndex	system: `[]`[T](s: openArray[T]; i: BackwardsIndex): T	
`[]`	system.html#[],array[Idx,T],BackwardsIndex	system: `[]`[Idx, T](a: array[Idx, T]; i: BackwardsIndex): T	
`[]`	system.html#[],string,BackwardsIndex	system: `[]`(s: string; i: BackwardsIndex): char	
`[]`	system.html#[],openArray[T],BackwardsIndex_2	system: `[]`[T](s: var openArray[T]; i: BackwardsIndex): var T	
`[]`	system.html#[],array[Idx,T],BackwardsIndex_2	system: `[]`[Idx, T](a: var array[Idx, T]; i: BackwardsIndex): var T	
`[]=`	system.html#[]=,openArray[T],BackwardsIndex,T	system: `[]=`[T](s: var openArray[T]; i: BackwardsIndex; x: T)	
`[]=`	system.html#[]=,array[Idx,T],BackwardsIndex,T	system: `[]=`[Idx, T](a: var array[Idx, T]; i: BackwardsIndex; x: T)	
`[]=`	system.html#[]=,string,BackwardsIndex,char	system: `[]=`(s: var string; i: BackwardsIndex; x: char)	
slurp	system.html#slurp,string	system: slurp(filename: string): string	
resource	system.html#resource_1	Module system	
staticRead	system.html#staticRead,string	system: staticRead(filename: string): string	
gorge	system.html#gorge,string,string,string	system: gorge(command: string; input = &quot;&quot;; cache = &quot;&quot;): string	
staticExec	system.html#staticExec,string,string,string	system: staticExec(command: string; input = &quot;&quot;; cache = &quot;&quot;): string	
gorgeEx	system.html#gorgeEx,string,string,string	system: gorgeEx(command: string; input = &quot;&quot;; cache = &quot;&quot;): tuple[output: string, exitCode: int]	
`+=`	system.html#+=,T,T	system: `+=`[T: SomeOrdinal | uint | uint64](x: var T; y: T)	
`-=`	system.html#-=,T,T	system: `-=`[T: SomeOrdinal | uint | uint64](x: var T; y: T)	
`*=`	system.html#*=,T,T	system: `*=`[T: SomeOrdinal | uint | uint64](x: var T; y: T)	
`+=`	system.html#+=,T,T_2	system: `+=`[T: float | float32 | float64](x: var T; y: T)	
`-=`	system.html#-=,T,T_2	system: `-=`[T: float | float32 | float64](x: var T; y: T)	
`*=`	system.html#*=,T,T_2	system: `*=`[T: float | float32 | float64](x: var T; y: T)	
`/=`	system.html#/=,float64,float64	system: `&#x2F;=`(x: var float64; y: float64)	
`/=`	system.html#/=,T,T	system: `&#x2F;=`[T: float | float32](x: var T; y: T)	
`&amp;=`	system.html#&=,string,string	system: `&amp;=`(x: var string; y: string)	
`&amp;=`	system.html#&=.t,typed,typed	system: `&amp;=`(x, y: typed)	
`&amp;=`	system.html#&=.t,File,typed	system: `&amp;=`(f: File; x: typed)	
astToStr	system.html#astToStr,T	system: astToStr[T](x: T): string	
caller info	system.html#caller-info_1	Module system	
instantiationInfo	system.html#instantiationInfo,	system: instantiationInfo(index = -1; fullPaths = false): tuple[filename: string, line: int,\n    column: int]	
currentSourcePath	system.html#currentSourcePath.t,	system: currentSourcePath(): string	
raiseAssert	system.html#raiseAssert,string	system: raiseAssert(msg: string)	
failedAssertImpl	system.html#failedAssertImpl,string	system: failedAssertImpl(msg: string)	
assert	system.html#assert.t,untyped,string	system: assert(cond: untyped; msg = &quot;&quot;)	
doAssert	system.html#doAssert.t,untyped,string	system: doAssert(cond: untyped; msg = &quot;&quot;)	
items	system.html#items.i,seq[T]	system: items[T](a: seq[T]): T	
mitems	system.html#mitems.i,seq[T]	system: mitems[T](a: var seq[T]): var T	
items	system.html#items.i,string	system: items(a: string): char	
mitems	system.html#mitems.i,string	system: mitems(a: var string): var char	
onFailedAssert	system.html#onFailedAssert.t,untyped,untyped	system: onFailedAssert(msg, code: untyped): untyped	
shallow	system.html#shallow_1	Module system	
shallow	system.html#shallow,seq[T]	system: shallow[T](s: var seq[T])	
shallow	system.html#shallow_2	Module system	
shallow	system.html#shallow,string	system: shallow(s: var string)	
NimNode	system.html#NimNode	system: NimNode	
insert	system.html#insert,string,string	system: insert(x: var string; item: string; i = 0.Natural)	
addEscapedChar	system.html#addEscapedChar,string,char	system: addEscapedChar(s: var string; c: char)	
addQuoted	system.html#addQuoted,string,T	system: addQuoted[T](s: var string; x: T)	
safeAdd	system.html#safeAdd,seq[T],T	system: safeAdd[T](x: var seq[T]; y: T)	
safeAdd	system.html#safeAdd,string,char	system: safeAdd(x: var string; y: char)	
safeAdd	system.html#safeAdd,string,string	system: safeAdd(x: var string; y: string)	
locals	system.html#locals,	system: locals(): RootObj	
deepCopy	system.html#deepCopy,T,T	system: deepCopy[T](x: var T; y: T)	
deepCopy	system.html#deepCopy,T	system: deepCopy[T](y: T): T	
method	system.html#method_1	Module system	
super	system.html#super_1	Module system	
procCall	system.html#procCall,untyped	system: procCall(x: untyped)	
xlen	system.html#xlen,string	system: xlen(x: string): int	
xlen	system.html#xlen,seq[T]	system: xlen[T](x: seq[T]): int	
`==`	system.html#==,cstring,cstring	system: `==`(x, y: cstring): bool	
`==`	system.html#==,string,	system: `==`(x: string; y: type(nil)): bool	
`==`	system.html#==,,string	system: `==`(x: type(nil); y: string): bool	
closureScope	system.html#closureScope.t,untyped	system: closureScope(body: untyped): untyped	
once	system.html#once.t,untyped	system: once(body: untyped): untyped	
substr	system.html#substr,string,int,int	system: substr(s: string; first, last: int): string	
cut	system.html#cut_1	Module system	
limit	system.html#limit_1	Module system	
substr	system.html#substr,string,int	system: substr(s: string; first = 0): string	
runnable example	system.html#runnable-example_1	Module system	
runnableExamples	system.html#runnableExamples,untyped	system: runnableExamples(body: untyped)	
doAssertRaises	system.html#doAssertRaises.t,untyped,untyped	system: doAssertRaises(exception, code: untyped): typed	
toOpenArray	system.html#toOpenArray,seq[T],int,int	system: toOpenArray[T](x: seq[T]; first, last: int): openArray[T]	
toOpenArray	system.html#toOpenArray,openArray[T],int,int	system: toOpenArray[T](x: openArray[T]; first, last: int): openArray[T]	
toOpenArray	system.html#toOpenArray,ptr.UncheckedArray[T],int,int	system: toOpenArray[T](x: ptr UncheckedArray[T]; first, last: int): openArray[T]	
toOpenArray	system.html#toOpenArray,array[I,T],I,I	system: toOpenArray[I, T](x: array[I, T]; first, last: I): openArray[T]	
toOpenArray	system.html#toOpenArray,string,int,int	system: toOpenArray(x: string; first, last: int): openArray[char]	
toOpenArrayByte	system.html#toOpenArrayByte,string,int,int	system: toOpenArrayByte(x: string; first, last: int): openArray[byte]	
for-loop macro	system.html#forminusloop-macro_1	Module system	
ForLoopStmt	system.html#ForLoopStmt	system: ForLoopStmt	
