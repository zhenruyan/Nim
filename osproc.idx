poEchoCmd	osproc.html#poEchoCmd	ProcessOption.poEchoCmd	
poUsePath	osproc.html#poUsePath	ProcessOption.poUsePath	
poEvalCommand	osproc.html#poEvalCommand	ProcessOption.poEvalCommand	
poStdErrToStdOut	osproc.html#poStdErrToStdOut	ProcessOption.poStdErrToStdOut	
poParentStreams	osproc.html#poParentStreams	ProcessOption.poParentStreams	
poInteractive	osproc.html#poInteractive	ProcessOption.poInteractive	
poDemon	osproc.html#poDemon	ProcessOption.poDemon	
ProcessOption	osproc.html#ProcessOption	osproc: ProcessOption	
Process	osproc.html#Process	osproc: Process	
poUseShell	osproc.html#poUseShell	osproc: poUseShell	
startCmd	osproc.html#startCmd,string,set[ProcessOption]	osproc: startCmd(command: string;\n         options: set[ProcessOption] = {poStdErrToStdOut, poUsePath}): Process	
processID	osproc.html#processID,Process	osproc: processID(p: Process): int	
inputHandle	osproc.html#inputHandle,Process	osproc: inputHandle(p: Process): FileHandle	
outputHandle	osproc.html#outputHandle,Process	osproc: outputHandle(p: Process): FileHandle	
errorHandle	osproc.html#errorHandle,Process	osproc: errorHandle(p: Process): FileHandle	
countProcessors	osproc.html#countProcessors,	osproc: countProcessors(): int	
execProcesses	osproc.html#execProcesses,openArray[string],proc(int),proc(int,Process)	osproc: execProcesses(cmds: openArray[string];\n              options = {poStdErrToStdOut, poParentStreams}; n = countProcessors();\n              beforeRunEvent: proc (idx: int) = nil;\n              afterRunEvent: proc (idx: int; p: Process) = nil): int	
execProcess	osproc.html#execProcess,string,string,openArray[string],StringTableRef,set[ProcessOption]	osproc: execProcess(command: string; workingDir: string = &quot;&quot;; args: openArray[string] = [];\n            env: StringTableRef = nil; options: set[ProcessOption] = {poStdErrToStdOut,\n    poUsePath, poEvalCommand}): TaintedString	
startProcess	osproc.html#startProcess,string,string,openArray[string],StringTableRef,set[ProcessOption]	osproc: startProcess(command: string; workingDir: string = &quot;&quot;; args: openArray[string] = [];\n             env: StringTableRef = nil;\n             options: set[ProcessOption] = {poStdErrToStdOut}): Process	
close	osproc.html#close,Process	osproc: close(p: Process)	
suspend	osproc.html#suspend,Process	osproc: suspend(p: Process)	
resume	osproc.html#resume,Process	osproc: resume(p: Process)	
running	osproc.html#running,Process	osproc: running(p: Process): bool	
terminate	osproc.html#terminate,Process	osproc: terminate(p: Process)	
kill	osproc.html#kill,Process	osproc: kill(p: Process)	
waitForExit	osproc.html#waitForExit,Process,int	osproc: waitForExit(p: Process; timeout: int = -1): int	
peekExitCode	osproc.html#peekExitCode,Process	osproc: peekExitCode(p: Process): int	
inputStream	osproc.html#inputStream,Process	osproc: inputStream(p: Process): Stream	
outputStream	osproc.html#outputStream,Process	osproc: outputStream(p: Process): Stream	
errorStream	osproc.html#errorStream,Process	osproc: errorStream(p: Process): Stream	
system	osproc.html#system_1	Module osproc	
execCmd	osproc.html#execCmd,string	osproc: execCmd(command: string): int	
select	osproc.html#select,seq[Process],int	osproc: select(readfds: var seq[Process]; timeout = 500): int	
hasData	osproc.html#hasData,Process	osproc: hasData(p: Process): bool	
execCmdEx	osproc.html#execCmdEx,string,set[ProcessOption]	osproc: execCmdEx(command: string;\n          options: set[ProcessOption] = {poStdErrToStdOut, poUsePath}): tuple[\n    output: TaintedString, exitCode: int]	
