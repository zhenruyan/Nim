queue	queues.html#queue_1	Module queues	
Queue	queues.html#Queue	queues: Queue	
initQueue	queues.html#initQueue,int	queues: initQueue[T](initialSize: int = 4): Queue[T]	
len	queues.html#len,Queue[T]	queues: len[T](q: Queue[T]): int	
front	queues.html#front,Queue[T]	queues: front[T](q: Queue[T]): T	
back	queues.html#back,Queue[T]	queues: back[T](q: Queue[T]): T	
`[]`	queues.html#[],Queue[T],Natural	queues: `[]`[T](q: Queue[T]; i: Natural): T	
`[]`	queues.html#[],Queue[T],Natural_2	queues: `[]`[T](q: var Queue[T]; i: Natural): var T	
`[]=`	queues.html#[]=,Queue[T],Natural,T	queues: `[]=`[T](q: var Queue[T]; i: Natural; val: T)	
items	queues.html#items.i,Queue[T]	queues: items[T](q: Queue[T]): T	
mitems	queues.html#mitems.i,Queue[T]	queues: mitems[T](q: var Queue[T]): var T	
pairs	queues.html#pairs.i,Queue[T]	queues: pairs[T](q: Queue[T]): tuple[key: int, val: T]	
contains	queues.html#contains,Queue[T],T	queues: contains[T](q: Queue[T]; item: T): bool	
add	queues.html#add,Queue[T],T	queues: add[T](q: var Queue[T]; item: T)	
pop	queues.html#pop,Queue[T]	queues: pop[T](q: var Queue[T]): T	
enqueue	queues.html#enqueue,Queue[T],T	queues: enqueue[T](q: var Queue[T]; item: T)	
dequeue	queues.html#dequeue,Queue[T]	queues: dequeue[T](q: var Queue[T]): T	
`$`	queues.html#$,Queue[T]	queues: `$`[T](q: Queue[T]): string	
