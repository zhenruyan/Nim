Asynchronous IO in Nim	asyncnet.html#asynchronous-io-in-nim	 Asynchronous IO in Nim	
SSL	asyncnet.html#ssl	 SSL	
Examples	asyncnet.html#examples	 Examples	
Chat server	asyncnet.html#examples-chat-server	  Chat server	
AsyncSocket	asyncnet.html#AsyncSocket	asyncnet: AsyncSocket	
newAsyncSocket	asyncnet.html#newAsyncSocket,AsyncFD,Domain,SockType,Protocol	asyncnet: newAsyncSocket(fd: AsyncFD; domain: Domain = AF_INET;\n               sockType: SockType = SOCK_STREAM; protocol: Protocol = IPPROTO_TCP;\n               buffered = true): AsyncSocket	
newAsyncSocket	asyncnet.html#newAsyncSocket,Domain,SockType,Protocol	asyncnet: newAsyncSocket(domain: Domain = AF_INET; sockType: SockType = SOCK_STREAM;\n               protocol: Protocol = IPPROTO_TCP; buffered = true): AsyncSocket	
newAsyncSocket	asyncnet.html#newAsyncSocket,cint,cint,cint	asyncnet: newAsyncSocket(domain, sockType, protocol: cint; buffered = true): AsyncSocket	
dial	asyncnet.html#dial,string,Port	asyncnet: dial(address: string; port: Port; protocol = IPPROTO_TCP; buffered = true): Future[\n    AsyncSocket]	
connect	asyncnet.html#connect,AsyncSocket,string,Port	asyncnet: connect(socket: AsyncSocket; address: string; port: Port): Future[void]	
recvInto	asyncnet.html#recvInto,AsyncSocket,pointer,int	asyncnet: recvInto(socket: AsyncSocket; buf: pointer; size: int; flags = {SafeDisconn}): Future[int]	
recv	asyncnet.html#recv,AsyncSocket,int	asyncnet: recv(socket: AsyncSocket; size: int; flags = {SafeDisconn}): Future[string]	
send	asyncnet.html#send,AsyncSocket,pointer,int	asyncnet: send(socket: AsyncSocket; buf: pointer; size: int; flags = {SafeDisconn}): Future[void]	
send	asyncnet.html#send,AsyncSocket,string	asyncnet: send(socket: AsyncSocket; data: string; flags = {SafeDisconn}): Future[void]	
acceptAddr	asyncnet.html#acceptAddr,AsyncSocket	asyncnet: acceptAddr(socket: AsyncSocket; flags = {SafeDisconn}): Future[\n    tuple[address: string, client: AsyncSocket]]	
accept	asyncnet.html#accept,AsyncSocket	asyncnet: accept(socket: AsyncSocket; flags = {SafeDisconn}): Future[AsyncSocket]	
recvLineInto	asyncnet.html#recvLineInto,AsyncSocket,FutureVar[string]	asyncnet: recvLineInto(socket: AsyncSocket; resString: FutureVar[string];\n             flags = {SafeDisconn}; maxLength = MaxLineLength): Future[void]	
recvLine	asyncnet.html#recvLine,AsyncSocket	asyncnet: recvLine(socket: AsyncSocket; flags = {SafeDisconn}; maxLength = MaxLineLength): Future[\n    string]	
listen	asyncnet.html#listen,AsyncSocket	asyncnet: listen(socket: AsyncSocket; backlog = SOMAXCONN)	
bindAddr	asyncnet.html#bindAddr,AsyncSocket,string	asyncnet: bindAddr(socket: AsyncSocket; port = Port(0); address = &quot;&quot;)	
connectUnix	asyncnet.html#connectUnix,AsyncSocket,string	asyncnet: connectUnix(socket: AsyncSocket; path: string): Future[void]	
bindUnix	asyncnet.html#bindUnix,AsyncSocket,string	asyncnet: bindUnix(socket: AsyncSocket; path: string)	
close	asyncnet.html#close,AsyncSocket	asyncnet: close(socket: AsyncSocket)	
wrapSocket	asyncnet.html#wrapSocket,SslContext,AsyncSocket	asyncnet: wrapSocket(ctx: SslContext; socket: AsyncSocket)	
wrapConnectedSocket	asyncnet.html#wrapConnectedSocket,SslContext,AsyncSocket,SslHandshakeType,string	asyncnet: wrapConnectedSocket(ctx: SslContext; socket: AsyncSocket;\n                    handshake: SslHandshakeType; hostname: string = &quot;&quot;)	
getSockOpt	asyncnet.html#getSockOpt,AsyncSocket,SOBool	asyncnet: getSockOpt(socket: AsyncSocket; opt: SOBool; level = SOL_SOCKET): bool	
setSockOpt	asyncnet.html#setSockOpt,AsyncSocket,SOBool,bool	asyncnet: setSockOpt(socket: AsyncSocket; opt: SOBool; value: bool; level = SOL_SOCKET)	
isSsl	asyncnet.html#isSsl,AsyncSocket	asyncnet: isSsl(socket: AsyncSocket): bool	
getFd	asyncnet.html#getFd,AsyncSocket	asyncnet: getFd(socket: AsyncSocket): SocketHandle	
isClosed	asyncnet.html#isClosed,AsyncSocket	asyncnet: isClosed(socket: AsyncSocket): bool	
